// vfio-user

struct vfio_user_header {
    __u16    msg_id;
    __u16    cmd;
    __u32    msg_size;
    struct {
        __u32    type     : 4;
#define VFIO_USER_F_TYPE_COMMAND    0
#define VFIO_USER_F_TYPE_REPLY      1
        __u32    no_reply : 1;
        __u32    error    : 1;
        __u32    resvd    : 26;
    } flags;
    __u32    error_no;
};

struct vfio_user_header_mini {
    __u16    msg_id;
    __u16    cmd;
};

struct vfio_user_dma_map {
    __u32 argsz;
#define VFIO_USER_F_DMA_REGION_READ     (1 << 0)
#define VFIO_USER_F_DMA_REGION_WRITE    (1 << 1)
    __u32 flags;
    __u64 offset;
    __u64 addr;
    __u64 size;
    __u64 pad;
};

struct vfio_user_dma_unmap {
    uint32_t argsz;
#ifndef VFIO_DMA_UNMAP_FLAG_GET_DIRTY_BITMAP
#define VFIO_DMA_UNMAP_FLAG_GET_DIRTY_BITMAP (1 << 0)
#endif
#ifndef VFIO_DMA_UNMAP_FLAG_ALL
#define VFIO_DMA_UNMAP_FLAG_ALL (1 << 1)
#endif
    uint32_t flags;
    uint64_t addr;
    uint64_t size;
    // struct vfio_user_bitmap bitmap[];
};

/*
struct iovec {
    void  *iov_base;
    size_t iov_len;
};

struct vfu_msg {
    struct vfio_user_header hdr;

    bool processed_cmd;

    struct {
       int *fds;
       size_t nr_fds;
       struct iovec iov;
    } in, out;

    struct iovec *out_iovecs;
    size_t nr_out_iovecs;
};
*/

// VFIO ioctl

struct vfio_iommu_type1_dma_map {
    __u32   argsz;
    __u32   flags;
#define VFIO_DMA_MAP_FLAG_READ (1 << 0)     /* readable from device */
#define VFIO_DMA_MAP_FLAG_WRITE (1 << 1)    /* writable from device */
#define VFIO_DMA_MAP_FLAG_VADDR (1 << 2)
    __u64   vaddr;              /* Process virtual address */
    __u64   iova;               /* IO virtual address */
    __u64   size;               /* Size of mapping (bytes) */
};

struct vfio_iommu_type1_dma_unmap {
    __u32   argsz;
    __u32   flags;
#define VFIO_DMA_UNMAP_FLAG_GET_DIRTY_BITMAP (1 << 0)
#define VFIO_DMA_UNMAP_FLAG_ALL          (1 << 1)
#define VFIO_DMA_UNMAP_FLAG_VADDR        (1 << 2)
    __u64   iova;               /* IO virtual address */
    __u64   size;               /* Size of mapping (bytes) */
    __u8    data[];
};

#define VFIO_IOMMU_MAP_DMA 15217
#define VFIO_IOMMU_UNMAP_DMA 15218

#define EINTR 4

BEGIN {
    @VFIO_CMD[1]  =  "VFIO_USER_VERSION";
    @VFIO_CMD[2]  =  "VFIO_USER_DMA_MAP";
    @VFIO_CMD[3]  =  "VFIO_USER_DMA_UNMAP";
    @VFIO_CMD[4]  =  "VFIO_USER_DEVICE_GET_INFO";
    @VFIO_CMD[5]  =  "VFIO_USER_DEVICE_GET_REGION_INFO";
    @VFIO_CMD[6]  =  "VFIO_USER_DEVICE_GET_REGION_IO_FDS";
    @VFIO_CMD[7]  =  "VFIO_USER_DEVICE_GET_IRQ_INFO";
    @VFIO_CMD[8]  =  "VFIO_USER_DEVICE_SET_IRQS";
    @VFIO_CMD[9]  =  "VFIO_USER_REGION_READ";
    @VFIO_CMD[10] =  "VFIO_USER_REGION_WRITE";
    @VFIO_CMD[11] =  "VFIO_USER_DMA_READ";
    @VFIO_CMD[12] =  "VFIO_USER_DMA_WRITE";
    @VFIO_CMD[13] =  "VFIO_USER_DEVICE_RESET";
    @VFIO_CMD[14] =  "VFIO_USER_DIRTY_PAGES";

    @indent = 0;
}

END {
    clear(@VFIO_CMD);
    clear(@);
    clear(@indent);
}

// static int handle_request(vfu_ctx_t *vfu_ctx, vfu_msg_t *msg)
u:./build/subprojects/libvfio-user/lib/libvfio-user.so.0:handle_request {
    // this does not work; bug?
    // $header = (struct vfio_user_header*)arg1;
    $header = (struct vfio_user_header_mini*)arg1;
    // $i = 0; unroll(5) { if ($i < @indent) { printf(" "); $i += 1; } }
    printf("[%d] [%lu] [%u] [%s] [libvfio] handle_request: %s\n",
            @indent, nsecs, tid, comm, @VFIO_CMD[$header->cmd]);
    @indent += 1;
}

ur:./build/subprojects/libvfio-user/lib/libvfio-user.so.0:handle_request {
    @indent -= 1;
}

// int handle_dma_map(vfu_ctx_t *vfu_ctx, vfu_msg_t *msg, struct vfio_user_dma_map *dma_map)
u:./build/subprojects/libvfio-user/lib/libvfio-user.so.0:handle_dma_map {
    // $msg = (struct vfu_msg*)arg1;
    $dma_map = (struct vfio_user_dma_map*)arg2;
    // $i = 0; unroll(5) { if ($i < @indent) { printf(" "); $i += 1; } }
    printf("[%d] [%lu] [%u] [%s] [libvfio] handle_dma_map: offset: %x, addr: %x, size: %x\n",
            @indent, nsecs, tid, comm,
            $dma_map->offset, $dma_map->addr, $dma_map->size);
    @indent += 1;
}

ur:./build/subprojects/libvfio-user/lib/libvfio-user.so.0:handle_dma_map {
    if (retval != 0) {
      // $i = 0; unroll(5) { if ($i < @indent) { printf(" "); $i += 1; } }
      printf("[%d] [%lu] [%u] [%s] [libvfio] handle_dma_unmap failed: ret: %d\n",
              @indent, nsecs, tid, comm, retval);
    }
    @indent -= 1;
}

// int handle_dma_unmap(vfu_ctx_t *vfu_ctx, vfu_msg_t *msg, struct vfio_user_dma_unmap *dma_map)
u:./build/subprojects/libvfio-user/lib/libvfio-user.so.0:handle_dma_unmap {
    $dma_unmap = (struct vfio_user_dma_unmap*)arg2;
    // $i = 0; unroll(5) { if ($i < @indent) { printf(" "); $i += 1; } }
    printf("[%d] [%lu] [%u] [%s] [libvfio] handle_dma_unmap: addr: %x, size: %x\n",
            @indent, nsecs, tid, comm, $dma_unmap->addr, $dma_unmap->size);
    @indent += 1;
}

ur:./build/subprojects/libvfio-user/lib/libvfio-user.so.0:handle_dma_unmap {
    if (retval != 0) {
      // $i = 0; unroll(5) { if ($i < @indent) { printf(" "); $i += 1; } }
      printf("[%d] [%lu] [%u] [%s] [libvfio] handle_dma_unmap failed: ret: %d\n",
              @indent, nsecs, tid, comm, retval);
    }
    @indent -= 1;
}


u:./build/subprojects/libvfio-user/lib/libvfio-user.so.0:dma_map_region {
    printf("[%d] [%lu] [%u] [%s] [libvfio] dma_map_region\n",
              @indent, nsecs, tid, comm);
    // @indent += 1;
}

ur:./build/subprojects/libvfio-user/lib/libvfio-user.so.0:dma_map_region {
  if (retval != 0) {
    printf("[%d] [%lu] [%u] [%s] [libvfio] dma_map_region failed: ret: %d\n",
            @indent, nsecs, tid, comm, retval);
  }
  // @indent -= 1;
}

u:./build/subprojects/libvfio-user/lib/libvfio-user.so.0:dma_controller_add_region {
  printf("[%d] [%lu] [%u] [%s] [libvfio] dma_controller_add_region: dma_addr=%lx, size=%lx, fd=%d, offset=%lx, prot=%d\n",
          @indent, nsecs, tid, comm, arg1, arg2, arg3, arg4, arg5);
}

ur:./build/subprojects/libvfio-user/lib/libvfio-user.so.0:dma_controller_add_region {
  printf("[%d] [%lu] [%u] [%s] [libvfio] dma_controller_add_region: ret: %d\n",
          @indent, nsecs, tid, comm, retval);
  // @indent -= 1;
}

// ioctl

tracepoint:syscalls:sys_enter_ioctl {
  @[tid] = args->cmd;
  if (args->cmd != VFIO_IOMMU_MAP_DMA) {
    return;
  }
  $a = (struct vfio_iommu_type1_dma_map*)(args->arg);
  // $i = 0; unroll(5) { if ($i < @indent) { printf(" "); $i += 1; } }
  printf("[%d] [%lu] [%u] [%s] [ioctl] VFIO_IOMMU_MAP_DMA (fd %u): argsz %x, flags %x, vaddr %llx, iova %llx, size %llx\n",
           @indent, nsecs, tid, comm, args->fd, $a->argsz, $a->flags, $a->vaddr, $a->iova, $a->size);
  // fd should be /dev/vfio/vfio according to /proc/$(pgrep vmux)/fd/$fd
  @indent += 1;
}

tracepoint:syscalls:sys_exit_ioctl / @[tid] == VFIO_IOMMU_MAP_DMA / {
  if (args->ret < 0 && args->ret != -EINTR) {
    // $i = 0; unroll(5) { if ($i < @indent) { printf(" "); $i += 1; } }
    printf("[%d] [%lu] [%u] [%s] [ioctl] VFIO_IOMMU_MAP_DMA failed: ret=%d\n",
             @indent, nsecs, tid, comm, args->ret);
  }
  @indent -= 1;
}

tracepoint:syscalls:sys_enter_ioctl {
  @[tid] = args->cmd;
  if (args->cmd != VFIO_IOMMU_UNMAP_DMA) {
    return;
  }
  $a = (struct vfio_iommu_type1_dma_unmap*)(args->arg);
  // $i = 0; unroll(5) { if ($i < @indent) { printf(" "); $i += 1; } }
  printf("[%d] [%lu] [%u] [%s] [ioctl] VFIO_IOMMU_UNMAP_DMA (fd %u): argsz %x, flags %x, iova %llx, size %llx\n", 
          @indent, nsecs, tid, comm, args->fd, $a->argsz, $a->flags, $a->iova, $a->size);
  // fd should be /dev/vfio/vfio according to /proc/$(pgrep vmux)/fd/$fd
  @indent += 1;
}

tracepoint:syscalls:sys_exit_ioctl / @[tid] == VFIO_IOMMU_UNMAP_DMA / {
  if (args->ret < 0 && args->ret != -EINTR) {
    // $i = 0; unroll(5) { if ($i < @indent) { printf(" "); $i += 1; } }
    printf("[%d] [%lu] [%u] [%s] [ioctl] VFIO_IOMMU_UNMAP_DMA failed: ret=%d\n",
            @indent, nsecs, tid, comm, args->ret);
  }
  @indent -= 1;
}

// iommu
kfunc:iommu_map {
  // $i = 0; unroll(5) { if ($i < @indent) { printf(" "); $i += 1; } }
  printf("[%d] [%lu] [%u] [%s] [kernel] iommu_map: iova %llx, paddr %llx, size %llx\n",
          @indent, nsecs, tid, comm, args->iova, args->paddr, args->size);
  @indent += 1;
}

kr:iommu_map {
  @indent -= 1;
}

kfunc:iommu_unmap {
  // $i = 0; unroll(5) { if ($i < @indent) { printf(" "); $i += 1; } }
  printf("[%d] [%lu] [%u] [%s] [kernel] iommu_unmap: iova %llx, size %llx\n",
          @indent, nsecs, tid, comm, args->iova, args->size);
  @indent += 1;
}

kr:iommu_unmap {
  @indent -= 1;
}

kfunc:iommu_unmap_fast {
  // $i = 0; unroll(5) { if ($i < @indent) { printf(" "); $i += 1; } }
  printf("[%d] [%lu] [%u] [%s] [kernel] iommu_unmap_fast: iova %llx, size %llx\n",
          @indent, nsecs, tid, comm, args->iova, args->size);
  @indent += 1;
}

kr:iommu_unmap_fast {
  @indent -= 1;
}


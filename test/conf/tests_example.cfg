username = gierens
home_dir = /home/${username}

# This is a test section, it contains normal and loop variables ... aside from
# repetitions, all variables with plural name (ending in s) can take lists
# of parameters to loop over, like rates, but not size for example.
# Only possible combinations of variables are run, and only those that haven't
# been run before.
#
# Multiple test sections are also possible. Note however, that the section
# name is not included in the output file names, so if you want to separate the
# outputs, you need to use different output directories.
[virtio]
# Type of test, options are moongen and iperf,
# iperf requires iperf reflector!
type=moongen
# Types of machines to test, options are host, pcvm and microvm ...
# host means the host machine, pcvm means a virtual machine with a
# PCI bus and microvm means a virtual machine without a PCI bus so
# MicroVM architecture.
machines = microvm
# Types of interfaces to test, options are pnic, bridge, bridge-e1000, vmux-pt, vmux-emu and macvtap ...
# pnic means a physical network interface card, bridge means a bridged TAP
# device and macvtap means a MacVTap device. Note that only possible
# combinations with machines are run.
interfaces = bridge
# Qemu builds to use ... format ist <name>:<path>
qemus = normal:${home_dir}/qemu-build
# vhost settigns to test
vhosts = false, true
# ioregionfd settigns to test
ioregionfds = false
# reflector types to use, options are moongen and xdp ... note that only
# possible combinations with machines are run.
# set to iperf for iperf test type
reflectors = xdp
# packet generator rates to test.
rates = 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150
# packet generator packet sizes to test.
size = 60
# packet generator runtimes to use.
runtimes = 30
# number of repetitions for each test.
repetitions = 2
# do a warmup run before the actual test.
warmup = false
# cooldown after each test.
cooldown = false
# accumulate results from multiple repetitions.
accumulate = true
# output directory for results.
outputdir = ${home_dir}/outputs
# iperf client command, runtime is already configured
iperf_cmd = -c 10.1.0.2
